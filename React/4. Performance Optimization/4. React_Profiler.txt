Q1. What is React Profiler and why is it useful?
ðŸ‘‰ React Profiler (in React DevTools) measures:
    How often components render.
    How long renders take.
    Which props/state triggered a render.
        ðŸ‘‰ Helps find performance bottlenecks.

Q2. How do you use React Profiler?
ðŸ‘‰ Wrap component in <Profiler>:

import { Profiler } from 'react';

function App() {
  const callback = (id, phase, actualDuration) => {
    console.log({ id, phase, actualDuration });
  };

  return (
    <Profiler id="App" onRender={callback}>
      <MyComponent />
    </Profiler>
  );
}
id â†’ identifier of component.
phase â†’ "mount" or "update".
actualDuration â†’ time spent rendering.

Q4. How do you identify unnecessary re-renders with Profiler?
ðŸ‘‰ Look for:
    Components re-rendering when props/state didnâ€™t change.
    Very frequent renders in short time (due to context or parent updates).








